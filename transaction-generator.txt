* Deploying Contracts
#+BEGIN_SRC sh
  <transaction-generator-binary> --script-command "deploy <list of filenames> true|false"
#+END_SRC

 - If the empty list is given then the coin, hello world and simple
   payments contract are loaded.

 - The bool flag is there to measure the amount of time it takes to
   deploy your contracts. This time is supposed to be logged. This is
   may be removed.

* Sending Transactions from the Standard Contracts
#+BEGIN_SRC shell
<transaction-generator-binary> --script-command "run-standard <distribution> true|false"
#+END_SRC

 - This sends transactions specified in the coin, hello world and
   simple payments contract.

 - The format for distribution is given below. This specifies a
   probability distribution to vary the delays between successive
   transaction transmissions.

 - The bool flag is there to measure the amount of time it takes to
   send a particular transaction. This time is supposed to be logged.
   There is an asynchronous listen issued after the request key for
   each transaction is received from the server.

* Sending Simple Transactions
#+BEGIN_SRC shell
 - <transaction-generator-binary> --script-command "run-simple <distribution> true|false"
#+END_SRC

 - This sends simple transactions like "(+ 2 2)" or "(* 12 46)". The
   only operators currently included are multiplication, adddition and
   subtraction.

 - The format for distribution is given below. This specifies a
   probability distribution to vary the delays between successive
   transaction transmissions.

 - The bool flag is there to measure the amount of time it takes to
   send a particular transaction. This time is supposed to be logged.
   There is an asynchronous listen issued after the request key for
   each transaction is received from the server.

* Polling
#+BEGIN_SRC shell
<transaction-generator-binary> --script-command "poll <list of request keys> true|false"
#+END_SRC

 - Given a list of request keys, return the results of the
   transactions corresponding to each request key.

 - The format for lists is given below.

 - The bool flag is there to measure the amount of time it takes to
   poll the request key. This time is supposed to be logged. This is
   may be removed.

* Listening

#+BEGIN_SRC shell
<transaction-generator-binary> --script-command "listen <request key> true|false"
#+END_SRC

 - Given a single request key, issue a listen api call with that
   request key. The result of the transaction associated with that
   request key should be returned if the result is returned before a
   HTTP timeout.

 - The bool flag is there to measure the amount of time it takes to
   listen upon the request key. This time is supposed to be logged. This is
   may be removed.

* Formats

** Timing Distribution

#+BEGIN_SRC shell
gaussian <mean:float> <variance:float>
#+END_SRC
OR
#+BEGIN_SRC shell
uniform <lower-bound:float> <upper-bound:float>
#+END_SRC

 - Currently, only the Gaussian and Uniform distributions are supported.

** List Format

#+BEGIN_SRC shell
[item_1,item_2,...,item_n]
#+END_SRC

 - Lists must start with an open bracket ([) and end with a close bracket (]).
   -- There is no space between the open bracket and the first item.
   -- There is no space between the close bracket and the first item.
 - Items are comma-separated. No spaces are allowed before or
   after the comma.
 - Each item must be satisfy this regular expression: [a-zA-Z\-0-9]+
   -- The ".pact" suffix is appended when the file is scheduled to be
   loaded.

;; Local Variables:
;; mode: org
;; End:
