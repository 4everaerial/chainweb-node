- output:
  - value:
      guard:
        pred: keys-all
        keys:
        - f880a433d6e2a13a32b6169030f56245efdd8c1b8a5027e9ce98a88e886bef27
      balance: 42
    key: miner
    table: USER_coin_coin-table
  cmd: coinbase
- output:
  - value:
      guard:
        pred: keys-all
        keys:
        - 368820f80c324bbc7c2b0610688a7da43e39f91d118732671cd9c7500ff43cca
      balance: 999.99
    key: sender00
    table: USER_coin_coin-table
  - value:
      guard:
        pred: keys-all
        keys:
        - 368820f80c324bbc7c2b0610688a7da43e39f91d118732671cd9c7500ff43cca
      balance: 999.99
    key: sender00
    table: USER_coin_coin-table
  - value:
      guard:
        pred: keys-all
        keys:
        - f880a433d6e2a13a32b6169030f56245efdd8c1b8a5027e9ce98a88e886bef27
      balance: 42.01
    key: miner
    table: USER_coin_coin-table
  cmd:
    tag: Code
    contents: (+ 1 1)
- output:
  - value:
      guard:
        pred: keys-all
        keys:
        - 368820f80c324bbc7c2b0610688a7da43e39f91d118732671cd9c7500ff43cca
      balance: 999.98
    key: sender00
    table: USER_coin_coin-table
  - value:
      pred: keys-all
      keys:
      - 368820f80c324bbc7c2b0610688a7da43e39f91d118732671cd9c7500ff43cca
    key: test-admin
    table: SYS_keysets
  - value:
      hash: B6ZJgfWD5obPGmYc_iRKirDMP6-UGm2pUV7mtHD-RsQ
      blessed: []
      interfaces: []
      imports: []
      name:
        namespace: null
        name: test1
      code: |
        (module test1 'test-admin

          (defschema account
            balance:decimal
            amount:decimal
            data)

          (deftable accounts:{account})

          (defun create-account (id init-bal)
            (insert accounts id
                 { "balance": init-bal, "amount": init-bal, "data": "Created account" }))

          (defun transfer (src dest amount)
            "transfer AMOUNT from SRC to DEST for unencrypted accounts"
            (debit src amount { "transfer-to": dest })
            (credit dest amount { "transfer-from": src }))

          (defpact payment (src-entity src dest-entity dest amount)
            "Two-phase confidential payment, sending money from SRC at SRC-ENTITY to DEST at DEST-ENTITY."

            (step-with-rollback
             src-entity
             (let ((result (debit src amount { "transfer-to": dest, "message": "Starting pact" })))
               (yield { "result": result, "amount": amount, "tx": (pact-id) }))
             (credit src amount { "rollback": (pact-id) }))

            (step
             dest-entity
             (resume { "result":= result, "amount":= debit-amount }
               (credit dest debit-amount
                       { "transfer-from": src, "debit-result": result, "tx": (pact-id) }))))

          (defun debit (acct amount data)
            "Debit ACCT for AMOUNT, enforcing positive amount and sufficient funds, annotating with DATA"
            (enforce-positive amount)
            (with-read accounts acct { "balance":= balance }
              (check-balance balance amount)
              (update accounts acct
                    { "balance": (- balance amount), "amount": (- amount)
                    , "data": data })))

          (defun credit (acct amount data)
            "Credit ACCT for AMOUNT, enforcing positive amount"
            (enforce-positive amount)
            (with-read accounts acct { "balance":= balance }
              (update accounts acct
                    { "balance": (+ balance amount), "amount": amount
                    , "data": data })))


          (defun read-account (id)
            "Read data for account ID"
            (+ { "account": id } (read accounts id)))

          (defun check-balance (balance amount)
            (enforce (<= amount balance) "Insufficient funds"))

          (defun enforce-positive (amount)
            (enforce (>= amount 0.0) "amount must be positive"))

         (defun read-all ()
           (map (read-account) (keys accounts)))

         (defun read-all-global ()
           (map (read-account) ["Acct1" "Acct2"]))

         (defun create-global-accounts ()
           (create-account "Acct1" 1000000.0)
           (create-account "Acct2" 0.0)
           (read-all))

         (defpact create-private-accounts ()
           (step "Alice" (create-account "A" 1000.0))
           (step "Bob" (create-account "B" 1000.0))
           (step "Carol" (create-account "C" 1000.0))
           (step "Dinesh" (create-account "D" 1000.0)))

        )
      meta:
        model: []
        docs: null
      governance:
        keyset: test-admin
    key: test1
    table: SYS_modules
  - value:
      guard:
        pred: keys-all
        keys:
        - 368820f80c324bbc7c2b0610688a7da43e39f91d118732671cd9c7500ff43cca
      balance: 999.98
    key: sender00
    table: USER_coin_coin-table
  - value:
      pred: keys-all
      keys:
      - 368820f80c324bbc7c2b0610688a7da43e39f91d118732671cd9c7500ff43cca
    key: test-admin
    table: SYS_keysets
  - value:
      hash: B6ZJgfWD5obPGmYc_iRKirDMP6-UGm2pUV7mtHD-RsQ
      blessed: []
      interfaces: []
      imports: []
      name:
        namespace: null
        name: test1
      code: |
        (module test1 'test-admin

          (defschema account
            balance:decimal
            amount:decimal
            data)

          (deftable accounts:{account})

          (defun create-account (id init-bal)
            (insert accounts id
                 { "balance": init-bal, "amount": init-bal, "data": "Created account" }))

          (defun transfer (src dest amount)
            "transfer AMOUNT from SRC to DEST for unencrypted accounts"
            (debit src amount { "transfer-to": dest })
            (credit dest amount { "transfer-from": src }))

          (defpact payment (src-entity src dest-entity dest amount)
            "Two-phase confidential payment, sending money from SRC at SRC-ENTITY to DEST at DEST-ENTITY."

            (step-with-rollback
             src-entity
             (let ((result (debit src amount { "transfer-to": dest, "message": "Starting pact" })))
               (yield { "result": result, "amount": amount, "tx": (pact-id) }))
             (credit src amount { "rollback": (pact-id) }))

            (step
             dest-entity
             (resume { "result":= result, "amount":= debit-amount }
               (credit dest debit-amount
                       { "transfer-from": src, "debit-result": result, "tx": (pact-id) }))))

          (defun debit (acct amount data)
            "Debit ACCT for AMOUNT, enforcing positive amount and sufficient funds, annotating with DATA"
            (enforce-positive amount)
            (with-read accounts acct { "balance":= balance }
              (check-balance balance amount)
              (update accounts acct
                    { "balance": (- balance amount), "amount": (- amount)
                    , "data": data })))

          (defun credit (acct amount data)
            "Credit ACCT for AMOUNT, enforcing positive amount"
            (enforce-positive amount)
            (with-read accounts acct { "balance":= balance }
              (update accounts acct
                    { "balance": (+ balance amount), "amount": amount
                    , "data": data })))


          (defun read-account (id)
            "Read data for account ID"
            (+ { "account": id } (read accounts id)))

          (defun check-balance (balance amount)
            (enforce (<= amount balance) "Insufficient funds"))

          (defun enforce-positive (amount)
            (enforce (>= amount 0.0) "amount must be positive"))

         (defun read-all ()
           (map (read-account) (keys accounts)))

         (defun read-all-global ()
           (map (read-account) ["Acct1" "Acct2"]))

         (defun create-global-accounts ()
           (create-account "Acct1" 1000000.0)
           (create-account "Acct2" 0.0)
           (read-all))

         (defpact create-private-accounts ()
           (step "Alice" (create-account "A" 1000.0))
           (step "Bob" (create-account "B" 1000.0))
           (step "Carol" (create-account "C" 1000.0))
           (step "Dinesh" (create-account "D" 1000.0)))

        )
      meta:
        model: []
        docs: null
      governance:
        keyset: test-admin
    key: test1
    table: SYS_modules
  - value:
      guard:
        pred: keys-all
        keys:
        - f880a433d6e2a13a32b6169030f56245efdd8c1b8a5027e9ce98a88e886bef27
      balance: 42.02
    key: miner
    table: USER_coin_coin-table
  cmd:
    tag: File
    contents: test1.pact
- output:
  - value:
      guard:
        pred: keys-all
        keys:
        - 368820f80c324bbc7c2b0610688a7da43e39f91d118732671cd9c7500ff43cca
      balance: 999.97
    key: sender00
    table: USER_coin_coin-table
  - value:
      utModule:
        namespace: null
        name: test1
    key: test1_accounts
    table: SYS_usertables
  - value:
      guard:
        pred: keys-all
        keys:
        - 368820f80c324bbc7c2b0610688a7da43e39f91d118732671cd9c7500ff43cca
      balance: 999.97
    key: sender00
    table: USER_coin_coin-table
  - value:
      utModule:
        namespace: null
        name: test1
    key: test1_accounts
    table: SYS_usertables
  - value:
      guard:
        pred: keys-all
        keys:
        - f880a433d6e2a13a32b6169030f56245efdd8c1b8a5027e9ce98a88e886bef27
      balance: 42.03
    key: miner
    table: USER_coin_coin-table
  cmd:
    tag: Code
    contents: (create-table test1.accounts)
- output:
  - value:
      guard:
        pred: keys-all
        keys:
        - 368820f80c324bbc7c2b0610688a7da43e39f91d118732671cd9c7500ff43cca
      balance: 999.96
    key: sender00
    table: USER_coin_coin-table
  - value:
      amount: 1000000
      data: Created account
      balance: 1000000
    key: Acct1
    table: USER_test1_accounts
  - value:
      amount: 0
      data: Created account
      balance: 0
    key: Acct2
    table: USER_test1_accounts
  - value:
      guard:
        pred: keys-all
        keys:
        - 368820f80c324bbc7c2b0610688a7da43e39f91d118732671cd9c7500ff43cca
      balance: 999.96
    key: sender00
    table: USER_coin_coin-table
  - value:
      amount: 1000000
      data: Created account
      balance: 1000000
    key: Acct1
    table: USER_test1_accounts
  - value:
      amount: 0
      data: Created account
      balance: 0
    key: Acct2
    table: USER_test1_accounts
  - value:
      guard:
        pred: keys-all
        keys:
        - f880a433d6e2a13a32b6169030f56245efdd8c1b8a5027e9ce98a88e886bef27
      balance: 42.04
    key: miner
    table: USER_coin_coin-table
  cmd:
    tag: Code
    contents: (test1.create-global-accounts)
- output:
  - value:
      guard:
        pred: keys-all
        keys:
        - 368820f80c324bbc7c2b0610688a7da43e39f91d118732671cd9c7500ff43cca
      balance: 999.95
    key: sender00
    table: USER_coin_coin-table
  - value:
      amount: -1
      data:
        transfer-to: Acct2
      balance: 999999
    key: Acct1
    table: USER_test1_accounts
  - value:
      amount: 1
      data:
        transfer-from: Acct1
      balance: 1
    key: Acct2
    table: USER_test1_accounts
  - value:
      guard:
        pred: keys-all
        keys:
        - 368820f80c324bbc7c2b0610688a7da43e39f91d118732671cd9c7500ff43cca
      balance: 999.95
    key: sender00
    table: USER_coin_coin-table
  - value:
      amount: -1
      data:
        transfer-to: Acct2
      balance: 999999
    key: Acct1
    table: USER_test1_accounts
  - value:
      amount: 1
      data:
        transfer-from: Acct1
      balance: 1
    key: Acct2
    table: USER_test1_accounts
  - value:
      guard:
        pred: keys-all
        keys:
        - f880a433d6e2a13a32b6169030f56245efdd8c1b8a5027e9ce98a88e886bef27
      balance: 42.05
    key: miner
    table: USER_coin_coin-table
  cmd:
    tag: Code
    contents: (test1.transfer "Acct1" "Acct2" 1.00)
