Object (fromList [("transactionPairs",Array [Array [Object (fromList [("tTxId",Number 0.0),("tCmd",Object (fromList [("hash",String "4613c20c3bdb18d0754a5549f8636217fc9b8aa5af3173fdd16a1fc3da5df7e86b484ba14625dd6caa767d95a24ca1f14aac5b5a217d51b278ff6a2266c6c879"),("sigs",Array []),("cmd",String "{\"payload\":{\"exec\":{\"data\":{\"test-admin-keyset\":[]},\"code\":\"(define-keyset 'test-admin (read-keyset \\\"test-admin-keyset\\\"))\\n\\n(module test1 'test-admin\\n\\n  (defschema account\\n    balance:decimal\\n    amount:decimal\\n    data)\\n\\n  (deftable accounts:{account})\\n\\n  (defun create-account (id init-bal)\\n    (insert accounts id\\n         { \\\"balance\\\": init-bal, \\\"amount\\\": init-bal, \\\"data\\\": \\\"Created account\\\" }))\\n\\n  (defun transfer (src dest amount)\\n    \\\"transfer AMOUNT from SRC to DEST for unencrypted accounts\\\"\\n    (debit src amount { \\\"transfer-to\\\": dest })\\n    (credit dest amount { \\\"transfer-from\\\": src }))\\n\\n  (defpact payment (src-entity src dest-entity dest amount)\\n    \\\"Two-phase confidential payment, sending money from SRC at SRC-ENTITY to DEST at DEST-ENTITY.\\\"\\n\\n    (step-with-rollback\\n     src-entity\\n     (let ((result (debit src amount { \\\"transfer-to\\\": dest, \\\"message\\\": \\\"Starting pact\\\" })))\\n       (yield { \\\"result\\\": result, \\\"amount\\\": amount, \\\"tx\\\": (pact-id) }))\\n     (credit src amount { \\\"rollback\\\": (pact-id) }))\\n\\n    (step\\n     dest-entity\\n     (resume { \\\"result\\\":= result, \\\"amount\\\":= debit-amount }\\n       (credit dest debit-amount\\n               { \\\"transfer-from\\\": src, \\\"debit-result\\\": result, \\\"tx\\\": (pact-id) }))))\\n\\n  (defun debit (acct amount data)\\n    \\\"Debit ACCT for AMOUNT, enforcing positive amount and sufficient funds, annotating with DATA\\\"\\n    (enforce-positive amount)\\n    (with-read accounts acct { \\\"balance\\\":= balance }\\n      (check-balance balance amount)\\n      (update accounts acct\\n            { \\\"balance\\\": (- balance amount), \\\"amount\\\": (- amount)\\n            , \\\"data\\\": data })))\\n\\n  (defun credit (acct amount data)\\n    \\\"Credit ACCT for AMOUNT, enforcing positive amount\\\"\\n    (enforce-positive amount)\\n    (with-read accounts acct { \\\"balance\\\":= balance }\\n      (update accounts acct\\n            { \\\"balance\\\": (+ balance amount), \\\"amount\\\": amount\\n            , \\\"data\\\": data })))\\n\\n\\n  (defun read-account (id)\\n    \\\"Read data for account ID\\\"\\n    (+ { \\\"account\\\": id } (read accounts id)))\\n\\n  (defun check-balance (balance amount)\\n    (enforce (<= amount balance) \\\"Insufficient funds\\\"))\\n\\n  (defun enforce-positive (amount)\\n    (enforce (>= amount 0.0) \\\"amount must be positive\\\"))\\n\\n (defun read-all ()\\n   (map (read-account) (keys accounts)))\\n\\n (defun read-all-global ()\\n   (map (read-account) [\\\"Acct1\\\" \\\"Acct2\\\"]))\\n\\n (defun create-global-accounts ()\\n   (create-account \\\"Acct1\\\" 1000000.0)\\n   (create-account \\\"Acct2\\\" 0.0)\\n   (read-all))\\n\\n (defpact create-private-accounts ()\\n   (step \\\"Alice\\\" (create-account \\\"A\\\" 1000.0))\\n   (step \\\"Bob\\\" (create-account \\\"B\\\" 1000.0))\\n   (step \\\"Carol\\\" (create-account \\\"C\\\" 1000.0))\\n   (step \\\"Dinesh\\\" (create-account \\\"D\\\" 1000.0)))\\n\\n)\\n\"}},\"meta\":{\"gasLimit\":0,\"chainId\":\"\",\"gasPrice\":0,\"sender\":\"\",\"fee\":0},\"nonce\":\"1.0\"}")]))]),Object (fromList [("getTxLogs",Array [Object (fromList [("value",Object (fromList [("pred",String "keys-all"),("keys",Array [])])),("key",String "test-admin"),("table",String "SYS_keysets")]),Object (fromList [("value",Object (fromList [("hash",String "13f27fa23ee849424e026dc668ad168dee4b4598d0d806778bf3a213f02402b437d0770f36402c06989903e492e64513bc65acabc281cc27a1c7a3f97dec374f"),("blessed",Array []),("keyset",String "test-admin"),("interfaces",Array []),("name",Object (fromList [("namespace",Null),("name",String "test1")])),("code",String "(module test1 'test-admin\n\n  (defschema account\n    balance:decimal\n    amount:decimal\n    data)\n\n  (deftable accounts:{account})\n\n  (defun create-account (id init-bal)\n    (insert accounts id\n         { \"balance\": init-bal, \"amount\": init-bal, \"data\": \"Created account\" }))\n\n  (defun transfer (src dest amount)\n    \"transfer AMOUNT from SRC to DEST for unencrypted accounts\"\n    (debit src amount { \"transfer-to\": dest })\n    (credit dest amount { \"transfer-from\": src }))\n\n  (defpact payment (src-entity src dest-entity dest amount)\n    \"Two-phase confidential payment, sending money from SRC at SRC-ENTITY to DEST at DEST-ENTITY.\"\n\n    (step-with-rollback\n     src-entity\n     (let ((result (debit src amount { \"transfer-to\": dest, \"message\": \"Starting pact\" })))\n       (yield { \"result\": result, \"amount\": amount, \"tx\": (pact-id) }))\n     (credit src amount { \"rollback\": (pact-id) }))\n\n    (step\n     dest-entity\n     (resume { \"result\":= result, \"amount\":= debit-amount }\n       (credit dest debit-amount\n               { \"transfer-from\": src, \"debit-result\": result, \"tx\": (pact-id) }))))\n\n  (defun debit (acct amount data)\n    \"Debit ACCT for AMOUNT, enforcing positive amount and sufficient funds, annotating with DATA\"\n    (enforce-positive amount)\n    (with-read accounts acct { \"balance\":= balance }\n      (check-balance balance amount)\n      (update accounts acct\n            { \"balance\": (- balance amount), \"amount\": (- amount)\n            , \"data\": data })))\n\n  (defun credit (acct amount data)\n    \"Credit ACCT for AMOUNT, enforcing positive amount\"\n    (enforce-positive amount)\n    (with-read accounts acct { \"balance\":= balance }\n      (update accounts acct\n            { \"balance\": (+ balance amount), \"amount\": amount\n            , \"data\": data })))\n\n\n  (defun read-account (id)\n    \"Read data for account ID\"\n    (+ { \"account\": id } (read accounts id)))\n\n  (defun check-balance (balance amount)\n    (enforce (<= amount balance) \"Insufficient funds\"))\n\n  (defun enforce-positive (amount)\n    (enforce (>= amount 0.0) \"amount must be positive\"))\n\n (defun read-all ()\n   (map (read-account) (keys accounts)))\n\n (defun read-all-global ()\n   (map (read-account) [\"Acct1\" \"Acct2\"]))\n\n (defun create-global-accounts ()\n   (create-account \"Acct1\" 1000000.0)\n   (create-account \"Acct2\" 0.0)\n   (read-all))\n\n (defpact create-private-accounts ()\n   (step \"Alice\" (create-account \"A\" 1000.0))\n   (step \"Bob\" (create-account \"B\" 1000.0))\n   (step \"Carol\" (create-account \"C\" 1000.0))\n   (step \"Dinesh\" (create-account \"D\" 1000.0)))\n\n)\n"),("meta",Object (fromList [("model",Array []),("docs",Null)]))])),("key",String "test1"),("table",String "SYS_modules")])]),("getCommandResult",Object (fromList [("status",String "success"),("data",String "Loaded module test1, hash \"13f27fa23ee849424e026dc668ad168dee4b4598d0d806778bf3a213f02402b437d0770f36402c06989903e492e64513bc65acabc281cc27a1c7a3f97dec374f\"")]))])],Array [Object (fromList [("tTxId",Number 1.0),("tCmd",Object (fromList [("hash",String "af5f48ee6b74db28ff1f125cd8ea40347a0e56ceabda19999a0f2133bff591a8829e651f1782966ca71d4915f1a2c9723772708caa75de4a3182719610b821d5"),("sigs",Array []),("cmd",String "{\"payload\":{\"exec\":{\"data\":{\"test-admin-keyset\":[]},\"code\":\"(create-table test1.accounts)\"}},\"meta\":{\"gasLimit\":0,\"chainId\":\"\",\"gasPrice\":0,\"sender\":\"\",\"fee\":0},\"nonce\":\"1.0\"}")]))]),Object (fromList [("getTxLogs",Array [Object (fromList [("value",Object (fromList [("utModule",Object (fromList [("namespace",Null),("name",String "test1")])),("utKeySet",String "test-admin")])),("key",String "test1_accounts"),("table",String "SYS_usertables")])]),("getCommandResult",Object (fromList [("status",String "success"),("data",String "TableCreated")]))])],Array [Object (fromList [("tTxId",Number 2.0),("tCmd",Object (fromList [("hash",String "906ae0f3f03b41807cc870b0ec4bea5f0c3e612db16a1734360421113686801ceb02d02f1ca306aee932ddf555a2cd8de8caf39b982e81e53cda859395a19bba"),("sigs",Array []),("cmd",String "{\"payload\":{\"exec\":{\"data\":{\"test-admin-keyset\":[]},\"code\":\"(test1.create-global-accounts)\"}},\"meta\":{\"gasLimit\":0,\"chainId\":\"\",\"gasPrice\":0,\"sender\":\"\",\"fee\":0},\"nonce\":\"1.0\"}")]))]),Object (fromList [("getTxLogs",Array [Object (fromList [("value",Object (fromList [("amount",Object (fromList [("_P_decm",Number 1.0e7),("_P_decp",Number 1.0)])),("data",String "Created account"),("balance",Object (fromList [("_P_decm",Number 1.0e7),("_P_decp",Number 1.0)]))])),("key",String "Acct1"),("table",String "USER_test1_accounts")]),Object (fromList [("value",Object (fromList [("amount",Object (fromList [("_P_decm",Number 0.0),("_P_decp",Number 1.0)])),("data",String "Created account"),("balance",Object (fromList [("_P_decm",Number 0.0),("_P_decp",Number 1.0)]))])),("key",String "Acct2"),("table",String "USER_test1_accounts")])]),("getCommandResult",Object (fromList [("status",String "success"),("data",Array [Object (fromList [("amount",String "1000000.0"),("data",String "Created account"),("balance",String "1000000.0"),("account",String "Acct1")]),Object (fromList [("amount",String "0.0"),("data",String "Created account"),("balance",String "0.0"),("account",String "Acct2")])])]))])],Array [Object (fromList [("tTxId",Number 3.0),("tCmd",Object (fromList [("hash",String "204db0b5443f57c024b11da49cf06045df49e3179e549a55a0e2ca4ad33374865dfc99205e88899bad01a0cc83e9044c58f418548381b7cec851920297c16b0a"),("sigs",Array []),("cmd",String "{\"payload\":{\"exec\":{\"data\":{\"test-admin-keyset\":[]},\"code\":\"(test1.transfer \\\"Acct1\\\" \\\"Acct2\\\" 1.00)\"}},\"meta\":{\"gasLimit\":0,\"chainId\":\"\",\"gasPrice\":0,\"sender\":\"\",\"fee\":0},\"nonce\":\"1.0\"}")]))]),Object (fromList [("getTxLogs",Array [Object (fromList [("value",Object (fromList [("amount",Object (fromList [("_P_decm",Number -100.0),("_P_decp",Number 2.0)])),("data",Object (fromList [("_P_val",Object (fromList [("transfer-to",String "Acct2")]))])),("balance",Object (fromList [("_P_decm",Number 9.99999e7),("_P_decp",Number 2.0)]))])),("key",String "Acct1"),("table",String "USER_test1_accounts")]),Object (fromList [("value",Object (fromList [("amount",Object (fromList [("_P_decm",Number 100.0),("_P_decp",Number 2.0)])),("data",Object (fromList [("_P_val",Object (fromList [("transfer-from",String "Acct1")]))])),("balance",Object (fromList [("_P_decm",Number 100.0),("_P_decp",Number 2.0)]))])),("key",String "Acct2"),("table",String "USER_test1_accounts")])]),("getCommandResult",Object (fromList [("status",String "success"),("data",String "Write succeeded")]))])]])])
