{-# LANGUAGE DataKinds #-}
{-# LANGUAGE KindSignatures #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE UnicodeSyntax #-}

-- |
-- Signature: Chainweb.ChainDB
-- Copyright: Copyright © 2018 Kadena LLC.
-- License: MIT
-- Maintainer: Lars Kuhtz <lars@kadena.io>
-- Stability: experimental
--
-- This signature provides a database interface for entries in a block chain. It
-- presents a view of a block chain as a
--
-- * content indexed set of entries
-- * with a parent relation that forms a rooted tree and
-- * with a rank function that provides for each entry it's depth in the
--   tree.
--
-- Additionally, it provides
--
-- * the set of branches, represented by the leafs of the tree,
-- * a children relation that allow to traverse the tree in the direction from
--   the root to the leafs, and
-- * an awaitable enumeration of the all current and future entries in the tree.
--
-- The tree is monotonically increasing and subtrees are immutable. An entry is
-- never removed from the tree.
--
-- ## Usage
--
-- This is a backpack siganture file. Its purpose is to serve as specification
-- of the ChainDB API that can be typechecked with GHC. Usage with backpack is
-- completely optional.
--
-- When used with backpack it allows authors to develop and type check
-- components that use this API without depending on a particular
-- implementation. This ensures compatibility with the API and prevents breaking
-- the abstraction when working with a particular implementation.
--
-- This signature can be type checked with GHC as follows:
--
-- @
-- ghc -isrc -fno-code -this-component-id tmp-sig -instantiated-with "Chainweb.ChainDB=<Chainweb.ChainDB>" Chainweb.ChainDB
-- @
--
-- ## TODO
--
-- Validation of Block Headers is fast enough to perform it synchronously. But
-- payload validation is slower and probably done asynchronously. This means
-- that either
--
-- * the tree isn't monotonically increasing (we don't want that),
-- * inserting external entries is a blocking operation,
-- * inserting an external entry puts the entry in a db internal staging slot
--   where it is hidden from (normal, sync-related) queries until it's
--   validated.
-- * sync doesn't care, so blocks with invalid payload are distributed and we
--   hope that this doesn't create to much overhead.
--
-- The last option opens an DOS attack vector, but that might be dealt with on a
-- different layer (e.g. reputation management).
--
-- For now we ignore the problem and defer it's solution to a future version
-- when we actually start to deal with block payloads.
--
signature Chainweb.ChainDB
(
-- * Chain Database Handle
  Configuration
, ChainDb
, initChainDb
, closeChainDb

-- * Validation Status
, ValidationStatus(..)

-- * Entry Type
, Key
, Entry
, key
, parent
, rank
, uncheckedKey
, uncheckedEntry
, decideKeyStatus
, decideEntryStatus
, KeySet

-- * Updates
, Updates
, updates
, updatesFrom
, updatesNext

-- * Pure Database Snapshot
, Snapshot
, snapshot
, syncSnapshot

-- * Queries
, branches
, children
, getEntry
, getEntryIO
, getEntrySync
, lookupEntry

-- * Insertion
, insert

-- * Serialization
, encodeEntry
, decodeEntry

-- * Exceptions
, DbException(..)
) where

import Control.Monad.Catch
import Control.Monad.STM

import qualified Data.ByteString as B
import Data.Hashable (Hashable)
import qualified Data.HashSet as HS
import Data.Kind

import Numeric.Natural

-- -------------------------------------------------------------------------- --
-- Chain Database Handle

-- | Configuration of the chain DB.
--
-- Implementation specific.
--
data Configuration

-- | A handle to the database. This is a mutable stateful object.
--
-- The database is guaranteed to never be empty.
--
data ChainDb

-- | Initialize a database handle
--
initChainDb ∷ Configuration → IO ChainDb

-- | Close a database handle and release all resources
--
closeChainDb ∷ ChainDb → IO ()

-- -------------------------------------------------------------------------- --
-- Validation Status

-- | A valid value is an entry or key of an entry that has been incorporated
-- into the database and has thus been validated to meet all consistency
-- requirements.
--
data ValidationStatus = Unchecked | Checked

-- -------------------------------------------------------------------------- --
-- Entry Type

-- | Key type for Entries. A key uniquly globally identifies an entry but is
-- expected to be much shorted than the entry itself.
--
data Key ∷ ValidationStatus → Type
instance Show (Key s)
instance Eq (Key s)
instance Ord (Key s)
instance Hashable (Key s)

-- | Type of a database entry
--
data Entry ∷ ValidationStatus → Type
instance Show (Entry s)
instance Eq (Entry s)

-- | Compute the 'Key' from an 'Entry'. A key is a globally unique hash of an
-- entry. Two entries have the same key if and only if they are the same.
--
key ∷ Entry s → Key s

-- | Each but exaclty one entry has a parent. The unique entry without a parent
-- is called the root entry.
--
-- The parent relation induces a tree on the set of all entries.
--
parent ∷ Entry s → Maybe (Key s)

-- | The rank of an entry is the depth of the entry in the tree from the root.
--
rank ∷ Entry s → Natural

-- | It's always possible to declare a key to be unchecked
--
uncheckedKey ∷ Key s → Key 'Unchecked

-- | It's always possible to declare an entry  to be unchecked
--
uncheckedEntry ∷ Entry s → Entry 'Unchecked

-- | Decides whether a key is checked
--
decideKeyStatus ∷ Key s → Either (Key 'Unchecked) (Key 'Checked)

-- | Decides whether an entry is checked
--
decideEntryStatus ∷ Entry s → Either (Entry 'Unchecked) (Entry 'Checked)

--  | A set of database keys
--
type KeySet (s ∷ ValidationStatus) = HS.HashSet (Key s)

-- -------------------------------------------------------------------------- --
-- Updates

-- | This is a mutable object that represents a stateful traversal of all
-- entries in the tree. It has the following properties:
--
-- 1. The traversal is deterministic,
-- 2. the traversed set forms a valid tree,
-- 3. the traversal can be started from any key in the database.
--
-- There is no guarantee that entries are traversed in the same order as they
-- are inserted.
--
data Updates ∷ Type

-- | Creates a traversal from some recently added key
--
updates ∷ ChainDb → IO Updates

-- | Creates a traversal from a given key
--
updatesFrom ∷ ChainDb → Key 'Checked → IO Updates

-- | Get next entry (represented by it's key) in the traversal
--
updatesNext ∷ Updates → STM (Key 'Checked)

-- -------------------------------------------------------------------------- --
-- Pure Database Snapshot

-- | An immutable pure snapshot of the database that can be queried and updated
-- efficientl locally in pure code.
--
-- Any changes to the 'Snapshot' are persisted to the backend database and
-- become visible to other users of the backend database only after calling
-- 'syncSnapshot'.
--
-- Any changes to the backend database become visible only after a calling
-- 'syncSnapshot'.
--
data Snapshot ∷ Type

-- | Checkout a pure snapshot of the database.
--
snapshot ∷ ChainDb → IO Snapshot

-- | Sychronize a database snapshot with the backend database. Because the
-- stored tree is content addressed and monotonically increasing there can't be
-- any conflicts.
--
-- All invariants are checked. If an invariant is violated this throws the
-- respective exception.
--
syncSnapshot ∷ Snapshot → IO Snapshot

-- -------------------------------------------------------------------------- --
-- Queries

-- | The set of all entries (identified by their key) that are not a parent of
-- an entry. These are the leafs of the tree.
--
-- Together with the 'parent' relation this allows to traverse the tree of
-- entries from the leafs to the root.
--
-- This result set is guaranteed to be non-empty. It will at least contain the
-- root of the tree.
--
branches ∷ Snapshot → KeySet 'Checked

-- | The children relation allows to efficiently traverse the tree of entries
-- from the root to the leafs.
--
children ∷ Key 'Checked → Snapshot → KeySet 'Checked

-- | Get the entry for a key.
--
-- 'Nothing' is returned only if the snapshot is outdated, i.e. when the
-- snapshot was taken before the key was included in the database. Synchronizing
-- the snapshot with 'syncSnapshot' will resolve this and 'getEntry' is
-- guaranteed to return 'Just' a value.
--
getEntry ∷ Key 'Checked → Snapshot → Maybe (Entry 'Checked)

-- | Get the entry for key.
--
-- Unlike 'getEntry' this function is guaranteed to return a value at the cost
-- of being in IO and possibly querying the entry from the backend database.
--
getEntryIO ∷ Key 'Checked → Snapshot → IO (Entry 'Checked)

-- | Get the entry for a key.
--
-- Similar to `getEntryIO`, except a `Snapshot` is returned as well.
-- If an internal sync needed to occur before yielding an entry,
-- then the `Snapshot` will be new. Otherwise, it will be the same
-- as what was given.
--
-- Fails with an exception if the key was not present in the Snapshot,
-- even after syncing. This would only occur if the checked key was
-- taken from a database /other/ than the one being queried.
--
-- Note: As a side-effect, any non-committed additions will be committed
-- by calling this function.
--
getEntrySync :: Key 'Checked → Snapshot → IO (Snapshot, Entry 'Checked)

-- | Looks up an entry in a database snapshot. Returns 'Nothing' if the entry
-- for the given key is not in the snapshot.
--
lookupEntry ∷ Key t → Snapshot → Maybe (Entry 'Checked)

-- -------------------------------------------------------------------------- --
-- Insertion

-- | Inserts an 'Entry' in the database snapshots and performs all consistency
-- checks.
--
-- Raises an 'ParentMissing' exception if the parent of the entry is not in the
-- snapshot.
--
-- Raises an 'InvalidRank' exception if the rank of the entry doesn't equal the
-- rank of the parent plus one.
--
-- Raises an 'ValidationFailed' exception if some other implementation specific
-- consistency check failed.
--
insert ∷ MonadThrow m ⇒ Entry s → Snapshot → m Snapshot

-- -------------------------------------------------------------------------- --
-- Serialization of Entries

-- | Serialize an 'Entry'
--
encodeEntry ∷ Entry s → B.ByteString

-- | Deserialize an 'Entry'. The deserialized values is 'Unchecked'.
--
-- Raises an 'DeserializationFailure' the decoding fails.
--
decodeEntry ∷ MonadThrow m ⇒ B.ByteString → m (Entry 'Unchecked)

-- -------------------------------------------------------------------------- --
-- Exceptions

data DbException
    = ValidationFailed (Entry 'Unchecked) SomeException
    | ParentMissing (Entry 'Unchecked)
    | InvalidRank (Entry 'Unchecked)
    | DeserializationFailure SomeException

instance Show DbException
instance Exception DbException
